# -*- coding: utf-8 -*-
"""OraculoGramatical.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mMuIVy65VnQ3JtxZTt4zKYSIeFGheI7e
"""

import streamlit as st
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
import os

# Cargar el dataset
@st.cache_data
def cargar_datos():
    if os.path.exists("frases_dativo_acusativo.csv"):
       return pd.read_csv("frases_dativo_acusativo.csv", encoding="latin1")

    else:
        return pd.DataFrame(columns=["sujeto", "verbo", "preposici√≥n", "objeto", "caso", "recibe_accion", "beneficiario", "prep_movimiento"])

df = cargar_datos()

# Entrenar el modelo
if not df.empty:
    X = df[["recibe_accion", "beneficiario", "prep_movimiento"]]
    y = df["caso"]
    modelo = DecisionTreeClassifier()
    modelo.fit(X, y)
else:
    modelo = None

# Preposiciones dativas
preposiciones_dativas = [
    "aus", "bei", "mit", "nach", "seit", "von", "zu",
    "au√üer", "gegen√ºber", "entgegen", "gem√§√ü"
]

st.title("üìö Or√°culo Gramatical: ¬øDativo o Acusativo?")
st.write("Introduce una frase en alem√°n y responde algunas preguntas para predecir el caso gramatical.")

frase = st.text_input("‚úçÔ∏è Escribe tu frase en alem√°n:")
prep = st.text_input("üìå ¬øCu√°l es la preposici√≥n principal de la frase? (Escribe '-' si no hay):").strip().lower()

if frase:
    if prep in preposiciones_dativas:
        st.success(f"La preposici√≥n '{prep}' exige **DATIVO** por regla gramatical.")
        prediccion = "dativo"
    elif modelo:
        st.write("Ahora responde estas preguntas sobre la funci√≥n del objeto en tu frase:")
        r = st.radio("1Ô∏è‚É£ ¬øEl sustantivo (objeto) recibe directamente la acci√≥n del verbo?", [1, 0], format_func=lambda x: "S√≠" if x == 1 else "No")
        b = st.radio("2Ô∏è‚É£ ¬øEl sustantivo es el destinatario o beneficiario de la acci√≥n?", [1, 0], format_func=lambda x: "S√≠" if x == 1 else "No")
        m = st.radio("3Ô∏è‚É£ ¬øLa preposici√≥n indica movimiento o direcci√≥n?", [1, 0], format_func=lambda x: "S√≠" if x == 1 else "No")

        if st.button("üîÆ Predecir"):
            prediccion = modelo.predict([[r, b, m]])[0]
            st.markdown(f"### ‚ú® El Or√°culo gramatical predice: **{prediccion.upper()}**")

            confirma = st.radio("¬øEs correcta esta predicci√≥n?", ["s√≠", "no"])
            if confirma == "no":
                caso_real = st.selectbox("¬øCu√°l es el caso correcto?", ["dativo", "acusativo"])
                nueva_fila = pd.DataFrame([{
                    "sujeto": "-", "verbo": "-", "preposici√≥n": prep, "objeto": frase,
                    "caso": caso_real, "recibe_accion": r, "beneficiario": b, "prep_movimiento": m
                }])
                df = pd.concat([df, nueva_fila], ignore_index=True)
                df.to_csv("frases_dativo_acusativo.csv", index=False, encoding="utf-8")
                st.success("‚úÖ Nuevo ejemplo a√±adido. El Or√°culo ha aprendido algo nuevo.")
    else:
        st.warning("‚ö†Ô∏è No hay suficientes datos para entrenar el modelo. Agrega ejemplos primero.")